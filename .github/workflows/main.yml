name: CI

on: [push, pull_request]

jobs:
  build-windows:

    runs-on: windows-2022
    steps:
    - uses: actions/checkout@v1
    - name: Setup WSL
      uses: Vampire/setup-wsl@v2.0.1
    - name: Restore vcpkg cache
      uses: lukka/run-vcpkg@v10
      with:
        vcpkgGitCommitId: 91dd61bd441a68b4017b61011d0350b2e6aeeccf
    - name: Prepare environment
      run: |
        mkdir x64\Release
        & $Env:VCPKG_ROOT\vcpkg integrate install
        ((Get-Content -path "$Env:VCPKG_ROOT\ports\poco\portfile.cmake") -replace "VCPKG_TARGET_IS_WINDOWS", "false") -replace "lib/cmake/Poco", "cmake" | Set-Content -Path "$Env:VCPKG_ROOT\ports\poco\portfile.cmake"
    - name: Make CL code
      shell: wsl-bash {0}
      run: |
        printf '// Generated automatically; do not edit!\n#include <string>\nnamespace OpenCL {std::string get_opencl_c_code() { return ' > src/cc-pixel-cl.cpp
        sed -n -e '/#ifndef OPENCV/{:a; N; /#endif/!ba; d}; s/"/\\"/g; s/^/"/g; s/$/\\n"/g; p' src/cc-pixel.cpp >> src/cc-pixel-cl.cpp
        echo ';}}' >> src/cc-pixel-cl.cpp
    - name: Build sanjuuni
      run: |
        function Invoke-Environment {
            param
            (
                # Any cmd shell command, normally a configuration batch file.
                [Parameter(Mandatory=$true)]
                [string] $Command
            )

            $Command = "`"" + $Command + "`""
            cmd /c "$Command > nul 2>&1 && set" | . { process {
                if ($_ -match '^([^=]+)=(.*)') {
                    [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
                }
            }}

        }

        Invoke-Environment "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        msbuild "sanjuuni.sln" /p:Configuration=Release
        # Remove buildtrees that kill the cache
        Remove-Item vcpkg\buildtrees\* -Force -Recurse -ErrorAction SilentlyContinue
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: sanjuuni-Artifact
        path: |
          x64\Release\sanjuuni.exe
          x64\Release\avcodec-59.dll
          x64\Release\swresample-4.dll
          x64\Release\avutil-57.dll
          x64\Release\soxr.dll
          x64\Release\libwebpmux.dll
          x64\Release\libwebp.dll
          x64\Release\libsharpyuv.dll
          x64\Release\liblzma.dll
          x64\Release\dav1d.dll
          x64\Release\snappy.dll
          x64\Release\libmp3lame.DLL
          x64\Release\openjp2.dll
          x64\Release\opus.dll
          x64\Release\speex-1.dll
          x64\Release\theoraenc.dll
          x64\Release\ogg.dll
          x64\Release\theoradec.dll
          x64\Release\vorbis.dll
          x64\Release\vorbisenc.dll
          x64\Release\openh264-6.dll
          x64\Release\zlib1.dll
          x64\Release\avdevice-59.dll
          x64\Release\avfilter-8.dll
          x64\Release\swscale-6.dll
          x64\Release\avformat-59.dll
          x64\Release\bz2.dll
          x64\Release\modplug.dll
          x64\Release\OpenCL.dll
          x64\Release\PocoFoundation.dll
          x64\Release\pcre2-8.dll
          x64\Release\PocoNet.dll
          x64\Release\PocoNetSSL.dll
          x64\Release\PocoCrypto.dll
          x64\Release\libcrypto-3-x64.dll
          x64\Release\PocoUtil.dll
          x64\Release\PocoXML.dll
          x64\Release\libexpat.dll
          x64\Release\PocoJSON.dll
          x64\Release\libssl-3-x64.dll
          32vid-player.lua
          bimg-player.lua
          raw-player.lua
          websocket-player.lua
          LICENSE
